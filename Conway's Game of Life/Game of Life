import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class GameOfLife { // Ronen Sherman - Conway's Game of Life using  java swing 

    public static void main(String[] args) throws InterruptedException {
        int w = 500;
        int h = 500;
        int[][] Grid = new int[w][h];


        StartGameOfLife(w, h, Grid); //starts the game
        //  makeGui();
    }

    static void makeGui() // creates gui
    {
        JFrame frame = new JFrame("Conway's Game of Life");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 250);
        frame.setLayout(new FlowLayout());


        JButton button1 = new JButton();
        button1.setText("New game of life");
        button1.setPreferredSize(new Dimension(300, 100));
        button1.addActionListener(new StartsGame());
        frame.add(button1);
        frame.setVisible(true);

    }

    static void StartGameOfLife(int x, int y, int[][] Grid) throws InterruptedException {

        DrawingPanel panel = new DrawingPanel(6000, 4000);
        Graphics g = panel.getGraphics();
        panel.addMouseListener(new SetLiveCells());
        g.setColor(Color.BLACK);
        panel.setVisible(true);
        panel.setGridLines(true);


        Grid[10][10]=1;
        Grid[10][9]=1;
        Grid[9][10]=1;
        Grid[10][11]=1;
        Grid[11][11]=1;




        int size = 12;

        while (true) {
            for (int i = 0; i < Grid.length; i++) {
                for (int j = 0; j < Grid.length; j++) {
                    if (Grid[i][j] == 0) {
                        g.setColor(Color.BLACK);
                        g.fillRect(i * size, j * size, size, size);
                    } else {
                        g.setColor(Color.WHITE);
                        g.fillRect(i * size, j * size, size, size);
                    }
                }
            }

/*Create a function that will use two arrays (array int[-1,0,1]) for x and y representing all adjacent cells
  use two nested for loops to iterate over this array and check each cell int[1][1] ectâ€¦ -1 represents previous cell,
  1 represents next cell, zero represents current cell, we use this to find how many live neighbors each cell will have.
  iterate over the main matrix and use the data and call the above function to find out how the cell will change.
. We can save the output into an output matrix that we can send to the main matrix when we reprint the main matrix.
 */
         // Iterates over main matrix of live and dead cells
           int[][] OutputM = new int [Grid.length][Grid.length];
            for (int i = 0; i < Grid.length; i++) {
                for (int j = 0; j < Grid[i].length; j++) {
                    if(i == 1 && j == 1)
                        System.out.println("tehee");
                    int sum =
                            Value(i, j + 1, Grid,Grid.length)
                          + Value(i, j - 1, Grid,Grid.length)
                                    + Value(i - 1, j, Grid,Grid.length)
                            + Value(i - 1, j + 1, Grid,Grid.length)
                                    + Value(i - 1, j - 1, Grid,Grid.length)
                            + Value(i + 1, j + 1, Grid,Grid.length )
                            + Value(i + 1, j - 1, Grid,Grid.length)
                            + Value(i + 1, j, Grid,Grid.length);
                    if ((sum == 2 || sum == 3) && Grid[i][j] == 1 ) {
                        OutputM[i][j] = 1;
                    }  else if( sum == 3 && Grid[i][j] == 0 )
                    {
                        OutputM[i][j] = 1;
                    }
                    else {
                        OutputM[i][j] = 0;
                    }
                }
            }
                     Grid = OutputM;
           // Thread.sleep(1000);
        }

    }


    public static int Value(int x, int y, int[][] Grid, int w) {
        if (x < 0 || x >= w -1 || y >= w - 1 || y < 0) {
            return 0;
        } else {
            return Grid[x][y];
        }
    }

    public static class SetLiveCells implements MouseListener {
        @Override
        public void mouseClicked(MouseEvent e) {

        }

        @Override
        public void mousePressed(MouseEvent e) {

        }

        @Override
        public void mouseReleased(MouseEvent e) {

        }

        @Override
        public void mouseEntered(MouseEvent e) {

        }

        @Override
        public void mouseExited(MouseEvent e) {

        }
    }

    public static class StartsGame implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
          //  StartGameOfLife();
        }
    }
}
