import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;

public class SnakeGame {
    public static int HIGH_SCORE = 0;
    public static final Color SNAKE_COLOR = Color.GREEN; // Default fixed color
    private static final int PANEL_WIDTH = 800;
    private static final int PANEL_HEIGHT = 600;
    private static final int CELL_SIZE = 20;
    public static final int INITIAL_SPEED = 100;  // Faster initial speed
    public static final int MIN_SPEED = 40;       // Faster minimum speed
    public static final int SPEED_DECREASE = 2;   // Smaller speed decrease for smoother acceleration

    public static void main(String[] args) {
        Snake snake = new Snake();
        startGame(snake);
    }

    public static void startGame(Snake snake) {
        snake = new Snake();
        System.out.println("Welcome to snake game!");
        System.out.println("The goal is to get points by eating fruit and to not run into any walls");

        snake.setSnakeLook('â– ');

        snake.setSnakeHighScore(HIGH_SCORE);
        snake.setDirection("Right");
        Fruit fruit = new Fruit();
        snake.setSnakeLength(3);
        snake.setAlive(true);
        snake.setSnakeSpeed(INITIAL_SPEED);

        DrawingPanel panel = new DrawingPanel(PANEL_WIDTH, PANEL_HEIGHT);
        Graphics2D g = (Graphics2D)panel.getGraphics();
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
        panel.setBackground(Color.BLACK);

        snake.createSnake(fruit);
        gameLoop(snake, fruit, panel, g);
    }

    static void gameLoop(Snake snake, Fruit fruit, DrawingPanel panel, Graphics g) {
        KeyboardListener keyListener = new KeyboardListener(snake);
        panel.addKeyListener(keyListener);

        while (snake.isAlive()) {
            snake.moveSnake(fruit, snake, panel, g);
            panel.sleep(snake.getSnakeSpeed());
        }
        System.out.println(snake.getScore());
    System.exit(0);
    }


}

class Snake {
    private char lastInput = 'd';
    private boolean didEatFruit;
    private String direction;
    private int newPosX;
    private int newPosY;
    private char snakeLook;
    private boolean isAlive;
    private int snakeHighScore;
    private int snakeLength;
    private int snakeSpeed;
    private int score;
    private int lastPosX;
    private int lastPosY;
    private ArrayList<Integer> snakePosX;
    private ArrayList<Integer> snakePosY;
    private static final int CELL_SIZE = 20;
    private final Rectangle snakeRect = new Rectangle(CELL_SIZE - 2, CELL_SIZE - 2); // Reusable rectangle for drawing

    public Snake() {
        snakePosX = new ArrayList<>();
        snakePosY = new ArrayList<>();
        score = 0;
    }

    // Getters and setters
    public void setDirection(String direction) { this.direction = direction; }
    public String getDirection() { return direction; }
    public void setSnakeLook(char look) { this.snakeLook = look; }
    public void setAlive(boolean alive) { this.isAlive = alive; }
    public boolean isAlive() { return isAlive; }
    public void setSnakeHighScore(int score) { this.snakeHighScore = score; }
    public void setSnakeLength(int length) { this.snakeLength = length; }
    public void setSnakeSpeed(int speed) { this.snakeSpeed = speed; }
    public int getSnakeSpeed() { return snakeSpeed; }
    public int getScore() { return score; }
    public char getLastInput() { return lastInput; }
    public void setLastInput(char input) { this.lastInput = input; }

    public void createSnake(Fruit fruit) {
        for (int i = 0; i < snakeLength; i++) {
            snakePosX.add(15 - i);
            snakePosY.add(15);
        }
        newPosX = snakePosX.get(0);
        newPosY = snakePosY.get(0);
    }

    public void moveSnake(Fruit fruit, Snake snake, DrawingPanel panel, Graphics g) {
        switch (direction) {
            case "Left":
                newPosX = snakePosX.get(0) - 1;
                newPosY = snakePosY.get(0);
                break;
            case "Right":
                newPosX = snakePosX.get(0) + 1;
                newPosY = snakePosY.get(0);
                break;
            case "Up":
                newPosX = snakePosX.get(0);
                newPosY = snakePosY.get(0) - 1;
                break;
            case "Down":
                newPosX = snakePosX.get(0);
                newPosY = snakePosY.get(0) + 1;
                break;
        }
        updateSnake(fruit, snake, panel, g);
    }

    public void updateSnake(Fruit fruit, Snake snake, DrawingPanel panel, Graphics g) {
        snakeCollisionCheck();
        snakeBoundaries();

        if (isAlive) {
            Graphics2D g2d = (Graphics2D) g;

            // Clear the panel and redraw everything
            g2d.setColor(Color.BLACK);
            g2d.fillRect(0, 0, panel.getWidth(), panel.getHeight());

            // Draw score
            g2d.setColor(Color.WHITE);
            g2d.drawString("Score: " + score, 10, 20);
            g2d.drawString("High Score: " + snakeHighScore, 10, 40);

            // Draw snake more efficiently using a single rectangle instance
            g2d.setColor(SnakeGame.SNAKE_COLOR);
            for (int i = 0; i < snakePosX.size(); i++) {
                snakeRect.setLocation(snakePosX.get(i) * CELL_SIZE, snakePosY.get(i) * CELL_SIZE);
                g2d.fill(snakeRect);
            }

            // Draw fruit
            g2d.setColor(Color.RED);
            snakeRect.setLocation(fruit.getFruitPosX() * CELL_SIZE, fruit.getFruitPosY() * CELL_SIZE);
            g2d.fill(snakeRect);

            // Update snake position
            snakePosX.add(0, newPosX);
            snakePosY.add(0, newPosY);
            lastPosX = snakePosX.remove(snakePosX.size() - 1);
            lastPosY = snakePosY.remove(snakePosY.size() - 1);

            if (fruit.getFruitPosX() == snakePosX.get(0) && fruit.getFruitPosY() == snakePosY.get(0)) {
                didEatFruit = true;
                snakeLength++;
                score++;
                snakePosX.add(lastPosX);
                snakePosY.add(lastPosY);

                if (snakeSpeed > SnakeGame.MIN_SPEED) {
                    snakeSpeed -= SnakeGame.SPEED_DECREASE;
                }

                fruit.drawFruit();
            }
        }
    }

    public void snakeCollisionCheck() {
        for (int i = 1; i < snakePosX.size(); i++) {
            if (snakePosX.get(0).equals(snakePosX.get(i)) && snakePosY.get(0).equals(snakePosY.get(i))) {
                isAlive = false;
            }
        }
    }

    public void snakeBoundaries() {
        int maxX = 39;  // (800/20) - 1
        int maxY = 29;  // (600/20) - 1

        if (snakePosX.get(0) >= maxX || snakePosY.get(0) >= maxY ||
                snakePosX.get(0) < 0 || snakePosY.get(0) < 0) {
            isAlive = false;
        }
    }
}

class Fruit {
    private int fruitPosX;
    private int fruitPosY;
    private static final Random random = new Random();
    private static final int MAX_X = 39;  // (800/20) - 1
    private static final int MAX_Y = 29;  // (600/20) - 1

    public Fruit() {
        drawFruit();
    }

    public int getFruitPosX() { return fruitPosX; }
    public int getFruitPosY() { return fruitPosY; }

    public void drawFruit() {
        fruitPosX = random.nextInt(MAX_X);
        fruitPosY = random.nextInt(MAX_Y);
    }
}

class KeyboardListener extends KeyAdapter {
    private Snake snake;

    public KeyboardListener(Snake snake) {
        this.snake = snake;
    }

    @Override
    public void keyPressed(KeyEvent e) {
        char input = Character.toLowerCase(e.getKeyChar());
        char lastInput = snake.getLastInput();

        // Prevent 180-degree turns
        if ((lastInput == 'w' && input == 's') ||
                (lastInput == 'a' && input == 'd') ||
                (lastInput == 's' && input == 'w') ||
                (lastInput == 'd' && input == 'a')) {
            return;
        }

        switch (input) {
            case 'a':
                snake.setDirection("Left");
                break;
            case 's':
                snake.setDirection("Down");
                break;
            case 'w':
                snake.setDirection("Up");
                break;
            case 'd':
                snake.setDirection("Right");
                break;
        }
        snake.setLastInput(input);
    }
}
