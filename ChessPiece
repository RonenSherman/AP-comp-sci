// Define the ChessPiece interface
interface ChessPiece {
    String getName();

    String color();

    boolean isValidMove(int startRow, int startCol, int endRow, int endCol);
}


//Knight
record Knight(String color) implements ChessPiece {

    @Override
    public String getName() {
        return "Knight";
    }

    @Override
    public boolean isValidMove(int startRow, int startCol, int endRow, int endCol) {
        int rowDiff = Math.abs(startRow - endRow);
        int colDiff = Math.abs(startCol - endCol);
        return (rowDiff == 2 && colDiff == 1) || (rowDiff == 1 && colDiff == 2);
    }
}

// Rook
record Rook(String color) implements ChessPiece {

    @Override
    public String getName() {
        return "Rook";
    }

    @Override
    public boolean isValidMove(int startRow, int startCol, int endRow, int endCol) {
        return startRow == endRow || startCol == endCol;
    }
}

// King
record King(String color) implements ChessPiece {

    @Override
    public String getName() {
        return "King";
    }

    @Override
    public boolean isValidMove(int startRow, int startCol, int endRow, int endCol) {
        return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;
    }
}

// Queen
record Queen(String color) implements ChessPiece {

    @Override
    public String getName() {
        return "Queen";
    }

    @Override
    public boolean isValidMove(int startRow, int startCol, int endRow, int endCol) {
        return startRow == endRow || startCol == endCol ||
                Math.abs(startRow - endRow) == Math.abs(startCol - endCol);
    }
}

//Bishop
record Bishop(String color) implements ChessPiece {

    @Override
    public String getName() {
        return "Bishop";
    }

    @Override
    public boolean isValidMove(int startRow, int startCol, int endRow, int endCol) {
        return (Math.abs(startCol - endCol) == Math.abs(startRow - endRow));
    }
}

//Pawn
class Pawn implements ChessPiece {
    private final String color;
    private boolean isFirstMove = true; // Track if the pawn has moved before

    public Pawn(String color) {
        this.color = color;
    }

    @Override
    public String getName() {
        return "Pawn";
    }

    @Override
    public String color() {
        return color;
    }

    @Override
    public boolean isValidMove(int startRow, int startCol, int endRow, int endCol) {
        int direction = color.equals("White") ? -1 : 1; // White moves up (-1), Black moves down (+1)
        int rowDiff = endRow - startRow;
        int colDiff = Math.abs(endCol - startCol);

        // Standard move: one step forward
        if (colDiff == 0 && rowDiff == direction) {
            return true;
        }

        // First move: two steps forward
        if (isFirstMove && colDiff == 0 && rowDiff == 2 * direction) {
            return true;
        }

        // Capturing: Move diagonally forward (one step)
        return colDiff == 1 && rowDiff == direction;

        // En Passant (Handled in game logic outside this method)
    }

    // En Passant validation (must be checked at game level)
    public boolean canEnPassant(int startRow, int endCol, Pawn lastMovedPawn, int lastMoveRow, int lastMoveCol) {
        if (lastMovedPawn == null || !lastMovedPawn.color().equals(oppositeColor()) || lastMoveRow != startRow) {
            return false; // En passant only applies to an adjacent pawn of the opposite color
        }

        // Check if the last move was a two-step pawn move
        if (Math.abs(lastMoveRow - startRow) == 2 && lastMoveCol == endCol) {
            return true;
        }
        return false;
    }

    private String oppositeColor() {
        return color.equals("White") ? "Black" : "White";
    }

    public void move() {
        isFirstMove = false; // Once moved, first move rule no longer applies
    }
}
