// Define the ChessPiece interface
interface ChessPiece {
    String getName();
    boolean iswhite();
    boolean isValidMove(int startRow, int startCol, int endRow, int endCol);
}

// Knight
class Knight implements ChessPiece {
    private final boolean isWhite;

    public Knight(boolean isWhite) {
        this.isWhite = isWhite;
    }

    @Override
    public String getName() {
        return "Knight";
    }

    @Override
    public boolean iswhite() {
        return isWhite;
    }

    @Override
    public boolean isValidMove(int startRow, int startCol, int endRow, int endCol) {
        int rowDiff = Math.abs(startRow - endRow);
        int colDiff = Math.abs(startCol - endCol);
        return (rowDiff == 2 && colDiff == 1) || (rowDiff == 1 && colDiff == 2);
    }
}

// Rook
class Rook implements ChessPiece {
    private final boolean isWhite;
    private boolean isFirstMove = true; // Track if the piece has moved before


    public Rook(boolean isWhite) {
        this.isWhite = isWhite;
    }

    @Override
    public String getName() {
        return "Rook";
    }

    @Override
    public boolean iswhite() {
        return isWhite;
    }

    @Override
    public boolean isValidMove(int startRow, int startCol, int endRow, int endCol) {
        if (startRow != endRow && startCol != endCol) {
            return false; // Must move straight
        }

        int rowStep = Integer.compare(endRow, startRow); // 1, 0, or -1
        int colStep = Integer.compare(endCol, startCol); // 1, 0, or -1

        int currentRow = startRow + rowStep;
        int currentCol = startCol + colStep;

        while (currentRow != endRow || currentCol != endCol) {
            if (Chess.GameBoard.gameBoard[currentRow][currentCol] != null) {
                return false; // Blocked
            }
            currentRow += rowStep;
            currentCol += colStep;
        }

        // Last square (endRow, endCol) may have enemy piece (capture) or be empty
        return true;
    }

    public void move() {
        isFirstMove = false; // Once moved, first move rule no longer applies
    }
    public boolean hasMoved() {
        return !isFirstMove;
    }
}

// King
class King implements ChessPiece {
    private final boolean isWhite;
    private boolean isFirstMove = true; // Track if the piece has moved before

    public King(boolean isWhite) {
        this.isWhite = isWhite;
    }

    @Override
    public String getName() {
        return "King";
    }

    @Override
    public boolean iswhite() {
        return isWhite;
    }

    @Override
    public boolean isValidMove(int startRow, int startCol, int endRow, int endCol) {
        // Ensure the King moves within one square in any direction (horizontally, vertically, or diagonally)
        return Math.abs(startRow - endRow) <= 1 && Math.abs(startCol - endCol) <= 1;
    }


    public void move() {
        isFirstMove = false; // Once moved, first move rule no longer applies
    }

    public boolean hasMoved() {
        return !isFirstMove;
    }

    public static boolean isInCheck(int kingRow, int kingCol) {
        // Check all opponent pieces to see if they can attack the King
        for (int row = 0; row < 8; row++) {
            for (int col = 0; col < 8; col++) {
                ChessPiece piece = Chess.GameBoard.gameBoard[row][col];

                if ((piece != null && Chess.GameBoard.gameBoard[kingRow][kingCol]!= null) && (piece.iswhite() != Chess.GameBoard.gameBoard[kingRow][kingCol].iswhite()) ){
                    if (piece.isValidMove(row, col, kingRow, kingCol)) { // If it can move to the king's position
                        return true; // King is in check
                    }
                }
            }
        }
        return false; // King is safe
    }
}

// Queen
class Queen implements ChessPiece {
    private final boolean isWhite;

    public Queen(boolean isWhite) {
        this.isWhite = isWhite;
    }

    @Override
    public String getName() {
        return "Queen";
    }

    @Override
    public boolean iswhite() {
        return isWhite;
    }

    @Override
    public boolean isValidMove(int startRow, int startCol, int endRow, int endCol) {
        // Queen moves like rook OR bishop

        // Rook-like movement (horizontal or vertical)
        if (startRow == endRow || startCol == endCol) {
            int rowStep = Integer.compare(endRow, startRow); // 1, 0, or -1
            int colStep = Integer.compare(endCol, startCol); // 1, 0, or -1

            int currentRow = startRow + rowStep;
            int currentCol = startCol + colStep;

            // Move along the path
            while (currentRow != endRow || currentCol != endCol) {
                if (Chess.GameBoard.gameBoard[currentRow][currentCol] != null) {
                    return false; // Blocked
                }
                currentRow += rowStep;
                currentCol += colStep;
            }

            return true;
        }

        // Bishop-like movement (diagonal)
        else if (Math.abs(startRow - endRow) == Math.abs(startCol - endCol)) {
            int rowStep = (endRow > startRow) ? 1 : -1; // Moves downwards for increasing row
            int colStep = (endCol > startCol) ? 1 : -1; // Moves rightwards for increasing column

            int currentRow = startRow + rowStep;
            int currentCol = startCol + colStep;

            // Move along the diagonal path
            while (currentRow != endRow && currentCol != endCol) {
                if (Chess.GameBoard.gameBoard[currentCol][currentRow] != null) {
                    return false; // Blocked
                }
                currentRow += rowStep;
                currentCol += colStep;
            }

            return true;
        }

        return false; // Invalid move
    }
}


    // Bishop
class Bishop implements ChessPiece {
        private final boolean isWhite;

        public Bishop(boolean isWhite) {
            this.isWhite = isWhite;
        }

        @Override
        public String getName() {
            return "Bishop";
        }

        @Override
        public boolean iswhite() {
            return isWhite;
        }

        @Override
        public boolean isValidMove(int startCol, int startRow, int endCol, int endRow) {
            if (Math.abs(startRow - endRow) == Math.abs(startCol - endCol)) {
                int rowStep = (endRow > startRow) ? 1 : -1;
                int colStep = (endCol > startCol) ? 1 : -1;

                int currentRow = startRow + rowStep;
                int currentCol = startCol + colStep;

                // Check for obstructions
                while (currentRow != endRow && currentCol != endCol) {
                    if (currentRow < 0 || currentRow >= 8 || currentCol < 0 || currentCol >= 8) {
                        return false; // Avoid out-of-bounds
                    }

                    if (Chess.GameBoard.gameBoard[currentCol][currentRow] != null) {
                        return false; // Blocked by another piece
                    }

                    currentRow += rowStep;
                    currentCol += colStep;
                }

                return true;
            }

            return false;
        }

    }

        // Pawn
class Pawn implements ChessPiece {
    private final boolean isWhite;
   private boolean isFirstMove = true; // Track if the pawn has moved before

    public Pawn(boolean isWhite) {
        this.isWhite = isWhite;
    }

    @Override
    public String getName() {
        return "Pawn";
    }

    @Override
    public boolean iswhite() {
        return isWhite;
    }

    @Override
    public boolean isValidMove(int startCol, int startRow, int endCol, int endRow) {
        int direction = isWhite ? -1 : 1; // White moves up (-1), Black moves down (+1)
        int rowDiff = endRow - startRow;
        int colDiff = Math.abs(endCol - startCol);

        // Standard move: one step forward (must be an empty square)
        if (colDiff == 0 && rowDiff == direction && Chess.GameBoard.gameBoard[endRow][endCol] == null) {
            move();
            return true;
        }

        // First move: two steps forward (must be an empty path and not blocked)
        if (isFirstMove && colDiff == 0 && rowDiff == 2 * direction) {
            if (Chess.GameBoard.gameBoard[startRow + direction][startCol] == null && Chess.GameBoard.gameBoard[endRow][endCol] == null) {
                move();
                return true;
            }
        }

        // Capturing: Move diagonally forward one step (must be an opponentâ€™s piece)
        if (colDiff == 1 && rowDiff == direction && Chess.GameBoard.gameBoard[endRow][endCol] != null) {
            return Chess.GameBoard.gameBoard[endRow][endCol].iswhite() != this.isWhite; // Opponent's piece
        }

        return false; // Any other move is invalid
    }

    // En Passant validation (checked at the game level)
    public boolean canEnPassant(int fromX, int fromY, int toX, int toY) {
        int direction = this.iswhite() ? -1 : 1;  // white moves up (-1), black down (+1)
        return (toY == fromY + direction) && (Math.abs(toX - fromX) == 1);
    }



            // Call this method after a pawn moves
    public void move() {
        isFirstMove = false; // Once moved, first move rule no longer applies
    }
}
