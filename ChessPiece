// Define the ChessPiece interface
interface ChessPiece {
    String getName();
    boolean iswhite();
    boolean isValidMove(int startRow, int startCol, int endRow, int endCol);
}

// Knight
class Knight implements ChessPiece {
    private final boolean isWhite;

    public Knight(boolean isWhite) {
        this.isWhite = isWhite;
    }

    @Override
    public String getName() {
        return "Knight";
    }

    @Override
    public boolean iswhite() {
        return isWhite;
    }

    @Override
    public boolean isValidMove(int startRow, int startCol, int endRow, int endCol) {
        int rowDiff = Math.abs(startRow - endRow);
        int colDiff = Math.abs(startCol - endCol);
        return (rowDiff == 2 && colDiff == 1) || (rowDiff == 1 && colDiff == 2);
    }
}

// Rook
class Rook implements ChessPiece {
    private final boolean isWhite;
    private boolean isFirstMove = true; // Track if the piece has moved before


    public Rook(boolean isWhite) {
        this.isWhite = isWhite;
    }

    @Override
    public String getName() {
        return "Rook";
    }

    @Override
    public boolean iswhite() {
        return isWhite;
    }

    @Override
    public boolean isValidMove(int startRow, int startCol, int endRow, int endCol) {
        return startRow == endRow || startCol == endCol;
    }
    public void move() {
        isFirstMove = false; // Once moved, first move rule no longer applies
    }
    public boolean hasMoved() {
        return !isFirstMove;
    }
}

// King
class King implements ChessPiece {
    private final boolean isWhite;
    private boolean isFirstMove = true; // Track if the piece has moved before

    public King(boolean isWhite) {
        this.isWhite = isWhite;
    }

    @Override
    public String getName() {
        return "King";
    }

    @Override
    public boolean iswhite() {
        return isWhite;
    }

    @Override
    public boolean isValidMove(int startRow, int startCol, int endRow, int endCol) {
        // Ensure the King moves within one square in any direction (horizontally, vertically, or diagonally)
        if (Math.abs(startRow - endRow) > 1 || Math.abs(startCol - endCol) > 1) {
            return false;
        }

        // Check if the destination square is occupied by a friendly piece (same color)
        ChessPiece targetPiece = Chess.GameBoard.gameBoard[endRow][endCol];
        if (targetPiece != null && targetPiece.iswhite() == this.iswhite()) {
            return false; // Cannot move to a square occupied by a piece of the same color
        }

        // Temporarily move the King to check if it puts itself in check
        ChessPiece temp = Chess.GameBoard.gameBoard[endRow][endCol]; // Save the piece at the destination
        Chess.GameBoard.gameBoard[endRow][endCol] = this; // Move King to new position
        Chess.GameBoard.gameBoard[startRow][startCol] = null; // Remove King from old position

        boolean isInCheck = isInCheck(endRow, endCol); // Check if the King is in check

        // Undo the temporary move
        Chess.GameBoard.gameBoard[startRow][startCol] = this;
        Chess.GameBoard.gameBoard[endRow][endCol] = temp;

        return !isInCheck; // Only allow the move if it does NOT put the King in check
    }

    public void move() {
        isFirstMove = false; // Once moved, first move rule no longer applies
    }

    public boolean hasMoved() {
        return !isFirstMove;
    }

    public static boolean isInCheck(int kingRow, int kingCol) {
        // Check all opponent pieces to see if they can attack the King
        for (int row = 0; row < 8; row++) {
            for (int col = 0; col < 8; col++) {
                ChessPiece piece = Chess.GameBoard.gameBoard[row][col];

                if (piece != null && piece.iswhite() != Chess.GameBoard.gameBoard[kingRow][kingCol].iswhite()) {
                    if (piece.isValidMove(row, col, kingRow, kingCol)) { // If it can move to the king's position
                        return true; // King is in check
                    }
                }
            }
        }
        return false; // King is safe
    }
}



// Queen
class Queen implements ChessPiece {
    private final boolean isWhite;

    public Queen(boolean isWhite) {
        this.isWhite = isWhite;
    }

    @Override
    public String getName() {
        return "Queen";
    }

    @Override
    public boolean iswhite() {
        return isWhite;
    }

    @Override
    public boolean isValidMove(int startRow, int startCol, int endRow, int endCol) {
        return startRow == endRow || startCol == endCol ||
                Math.abs(startRow - endRow) == Math.abs(startCol - endCol);
    }
}

// Bishop
class Bishop implements ChessPiece {
    private final boolean isWhite;

    public Bishop(boolean isWhite) {
        this.isWhite = isWhite;
    }

    @Override
    public String getName() {
        return "Bishop";
    }

    @Override
    public boolean iswhite() {
        return isWhite;
    }

    @Override
    public boolean isValidMove(int startRow, int startCol, int endRow, int endCol) {
        return Math.abs(startCol - endCol) == Math.abs(startRow - endRow);
    }
}

// Pawn
class Pawn implements ChessPiece {
    private final boolean isWhite;
   private boolean isFirstMove = true; // Track if the pawn has moved before

    public Pawn(boolean isWhite) {
        this.isWhite = isWhite;
    }

    @Override
    public String getName() {
        return "Pawn";
    }

    @Override
    public boolean iswhite() {
        return isWhite;
    }

    @Override
    public boolean isValidMove(int startCol, int startRow, int endCol, int endRow) {
        int direction = isWhite ? 1 : -1; // White moves up (-1), Black moves down (+1)
        int rowDiff = endRow - startRow;
        int colDiff = Math.abs(endCol - startCol);

        // Standard move: one step forward (must be an empty square)
        if (colDiff == 0 && rowDiff == direction && Chess.GameBoard.gameBoard[endRow][endCol] == null) {
            return true;
        }

        // First move: two steps forward (must be an empty path and not blocked)
        if (isFirstMove && colDiff == 0 && rowDiff == 2 * direction) {
            if (Chess.GameBoard.gameBoard[startRow + direction][startCol] == null && Chess.GameBoard.gameBoard[endRow][endCol] == null) {
                return true;
            }
        }

        // Capturing: Move diagonally forward one step (must be an opponent’s piece)
        if (colDiff == 1 && rowDiff == direction && Chess.GameBoard.gameBoard[endRow][endCol] != null) {
            return Chess.GameBoard.gameBoard[endRow][endCol].iswhite() != this.isWhite; // Opponent's piece
        }

        return false; // Any other move is invalid
    }

    // En Passant validation (checked at the game level)
    public boolean canEnPassant(int startRow, int startCol, int endRow, int endCol,
                                Pawn lastMovedPawn, int lastMoveStartRow, int lastMoveEndRow, int lastMoveCol) {
        if (lastMovedPawn == null || lastMovedPawn.iswhite() == this.isWhite) {
            return false; // En passant only applies to an adjacent pawn of the opposite color
        }

        // En passant is only valid if the opponent just moved two squares forward
        if (Math.abs(lastMoveStartRow - lastMoveEndRow) == 2 && lastMoveEndRow == startRow) {
            return lastMoveCol == endCol; // The target column must match the opponent’s last column
        }

        return false;
    }

    // Call this method after a pawn moves
    public void move() {
        isFirstMove = false; // Once moved, first move rule no longer applies
    }
}
